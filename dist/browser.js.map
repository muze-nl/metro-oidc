{"mappings":"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","sources":["<anon>","src/browser.mjs","src/oidc.discovery.mjs","src/oidc.util.mjs","src/oidc.register.mjs"],"sourcesContent":["var $16ZAN$muzenlmetro = require(\"@muze-nl/metro\");\nvar $16ZAN$muzenlmetrosrcmwjsonmjs = require(\"@muze-nl/metro/src/mw/json.mjs\");\nvar $16ZAN$muzenlmetrosrcmwthrowermjs = require(\"@muze-nl/metro/src/mw/thrower.mjs\");\nvar $16ZAN$muzenlassert = require(\"@muze-nl/assert\");\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n\n\n\nconst $e4c168dc2d77f7c6$export$f9f8beaf0a247bc1 = (...options)=>(value, root)=>{\n        if (options.filter((o)=>root.hasOwnKey(o)).length > 0) return false;\n        return (0, $16ZAN$muzenlassert.error)(\"root data must have all of\", root, options);\n    };\nconst $e4c168dc2d77f7c6$export$2f724b94a5191b13 = (...options)=>(value)=>{\n        if (Array.isArray(value) && options.filter((o)=>!value.includes(o)).length == 0) return false;\n        else return (0, $16ZAN$muzenlassert.error)(\"data must be an array which includes\", data, options);\n    };\nconst $e4c168dc2d77f7c6$export$27f787fafc34e12a = [\n    \"HS256\",\n    \"HS384\",\n    \"HS512\",\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\"\n];\nconst $e4c168dc2d77f7c6$export$1c533a3c9f23d838 = [\n    \"HS256\",\n    \"HS384\",\n    \"HS512\",\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\"\n];\nconst $e4c168dc2d77f7c6$export$8a97a031337e50a9 = [\n    \"client_secret_post\",\n    \"client_secret_basic\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\"\n];\n\n\n\nasync function $59828fc83ae4bfdc$export$2e2bcd8739ae039(options = {}) {\n    const defaultOptions = {\n        client: $16ZAN$muzenlmetro.client().with((0, ($parcel$interopDefault($16ZAN$muzenlmetrosrcmwthrowermjs)))()).with((0, ($parcel$interopDefault($16ZAN$muzenlmetrosrcmwjsonmjs)))()),\n        requireDynamicRegistration: false\n    };\n    options = Object.assign({}, defaultOptions, options);\n    (0, $16ZAN$muzenlassert.assert)(options, {\n        client: (0, $16ZAN$muzenlassert.Required)((0, $16ZAN$muzenlassert.instanceOf)($16ZAN$muzenlmetro.client().constructor)),\n        issuer: (0, $16ZAN$muzenlassert.Required)((0, $16ZAN$muzenlassert.validURL))\n    });\n    // https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n    const openid_provider_metadata = {\n        issuer: (0, $16ZAN$muzenlassert.Required)(options.issuer),\n        authorization_endpoint: (0, $16ZAN$muzenlassert.Required)((0, $16ZAN$muzenlassert.validURL)),\n        token_endpoint: (0, $16ZAN$muzenlassert.Required)((0, $16ZAN$muzenlassert.validURL)),\n        userinfo_endpoint: (0, $16ZAN$muzenlassert.Recommended)((0, $16ZAN$muzenlassert.validURL)),\n        jwks_uri: (0, $16ZAN$muzenlassert.Required)((0, $16ZAN$muzenlassert.validURL)),\n        registration_endpoint: options.requireDynamicRegistration ? (0, $16ZAN$muzenlassert.Required)((0, $16ZAN$muzenlassert.validURL)) : (0, $16ZAN$muzenlassert.Recommended)((0, $16ZAN$muzenlassert.validURL)),\n        scopes_supported: (0, $16ZAN$muzenlassert.Recommended)((0, $e4c168dc2d77f7c6$export$2f724b94a5191b13)(\"openid\")),\n        response_types_supported: options.requireDynamicRegistration ? (0, $16ZAN$muzenlassert.Required)((0, $e4c168dc2d77f7c6$export$2f724b94a5191b13)(\"code\", \"id_token\", \"id_token token\")) : (0, $16ZAN$muzenlassert.Required)([]),\n        response_modes_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        grant_types_supported: options.requireDynamicRegistration ? (0, $16ZAN$muzenlassert.Optional)((0, $e4c168dc2d77f7c6$export$2f724b94a5191b13)(\"authorization_code\")) // implicit is required according to the spec, but not used in web apps\n         : (0, $16ZAN$muzenlassert.Optional)([]),\n        acr_values_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        subject_types_supported: (0, $16ZAN$muzenlassert.Required)([]),\n        id_token_signing_alg_values_supported: (0, $16ZAN$muzenlassert.Required)((0, $e4c168dc2d77f7c6$export$2f724b94a5191b13)(\"RS256\")),\n        id_token_encryption_alg_values_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        id_token_encryption_enc_values_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        userinfo_signing_alg_values_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        userinfo_encryption_alg_values_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        userinfo_encryption_enc_values_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        request_object_signing_alg_values_supported: (0, $16ZAN$muzenlassert.Optional)((0, $e4c168dc2d77f7c6$export$2f724b94a5191b13)(\"RS256\")),\n        request_object_encryption_alg_values_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        request_object_encryption_enc_values_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        token_endpoint_auth_methods_supported: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.anyOf)(...(0, $e4c168dc2d77f7c6$export$8a97a031337e50a9))),\n        token_endpoint_auth_signing_alg_values_supported: (0, $16ZAN$muzenlassert.Optional)((0, $e4c168dc2d77f7c6$export$2f724b94a5191b13)(\"RS256\"), (0, $16ZAN$muzenlassert.not)((0, $e4c168dc2d77f7c6$export$2f724b94a5191b13)(\"none\"))),\n        display_values_supported: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.anyOf)(\"page\", \"popup\", \"touch\", \"wap\")),\n        claim_types_supported: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.anyOf)(\"normal\", \"aggregated\", \"distributed\")),\n        claims_supported: (0, $16ZAN$muzenlassert.Recommended)([]),\n        service_documentation: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL)),\n        claims_locales_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        ui_locales_supported: (0, $16ZAN$muzenlassert.Optional)([]),\n        claims_parameter_supported: (0, $16ZAN$muzenlassert.Optional)(Boolean),\n        request_parameter_supported: (0, $16ZAN$muzenlassert.Optional)(Boolean),\n        request_uri_parameter_supported: (0, $16ZAN$muzenlassert.Optional)(Boolean),\n        op_policy_uri: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL)),\n        op_tos_uri: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL))\n    };\n    // fetch openid configuration from wellknown and return the json\n    const response = await options.client.get(// https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationRequest\n    // note: this allows path components in the options.issuer url\n    $16ZAN$muzenlmetro.url(options.issuer, \".well-known/openid-configuration\"));\n    (0, $16ZAN$muzenlassert.assert)(response.body, openid_provider_metadata);\n    // https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationValidation\n    (0, $16ZAN$muzenlassert.assert)(response.body.issuer, options.issuer);\n    return response.body;\n}\n\n\n\n\n\n\n\nasync function $97def07305c356e0$export$2e2bcd8739ae039(options) {\n    const defaultOptions = {\n        client: $16ZAN$muzenlmetro.client().with((0, ($parcel$interopDefault($16ZAN$muzenlmetrosrcmwthrowermjs)))()).with((0, ($parcel$interopDefault($16ZAN$muzenlmetrosrcmwjsonmjs)))())\n    };\n    options = Object.assign({}, defaultOptions, options);\n    // https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata\n    const openid_client_metadata = {\n        redirect_uris: (0, $16ZAN$muzenlassert.Required)([\n            (0, $16ZAN$muzenlassert.validURL)\n        ]),\n        response_types: (0, $16ZAN$muzenlassert.Optional)([]),\n        grant_types: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.anyOf)(\"authorization_code\", \"refresh_token\")),\n        application_type: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(\"native\", \"web\")),\n        contacts: (0, $16ZAN$muzenlassert.Optional)([\n            (0, $16ZAN$muzenlassert.validEmail)\n        ]),\n        client_name: (0, $16ZAN$muzenlassert.Optional)(String),\n        logo_uri: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL)),\n        client_uri: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL)),\n        policy_uri: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL)),\n        tos_uri: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL)),\n        jwks_uri: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL), (0, $16ZAN$muzenlassert.not)((0, $e4c168dc2d77f7c6$export$f9f8beaf0a247bc1)(\"jwks\"))),\n        jwks: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL), (0, $16ZAN$muzenlassert.not)((0, $e4c168dc2d77f7c6$export$f9f8beaf0a247bc1)(\"jwks_uri\"))),\n        sector_identifier_uri: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.validURL)),\n        subject_type: (0, $16ZAN$muzenlassert.Optional)(String),\n        id_token_signed_response_alg: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838))),\n        id_token_encrypted_response_alg: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838))),\n        id_token_encrypted_response_enc: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838)), (0, $e4c168dc2d77f7c6$export$f9f8beaf0a247bc1)(\"id_token_encrypted_response_alg\")),\n        userinfo_signed_response_alg: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838))),\n        userinfo_encrypted_response_alg: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838))),\n        userinfo_encrypted_response_enc: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838)), (0, $e4c168dc2d77f7c6$export$f9f8beaf0a247bc1)(\"userinfo_encrypted_response_alg\")),\n        request_object_signing_alg: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838))),\n        request_object_encryption_alg: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838))),\n        request_object_encryption_enc: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838))),\n        token_endpoint_auth_method: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$8a97a031337e50a9))),\n        token_endpoint_auth_signing_alg: (0, $16ZAN$muzenlassert.Optional)((0, $16ZAN$muzenlassert.oneOf)(...(0, $e4c168dc2d77f7c6$export$1c533a3c9f23d838))),\n        default_max_age: (0, $16ZAN$muzenlassert.Optional)(Number),\n        require_auth_time: (0, $16ZAN$muzenlassert.Optional)(Boolean),\n        default_acr_values: (0, $16ZAN$muzenlassert.Optional)([\n            String\n        ]),\n        initiate_login_uri: (0, $16ZAN$muzenlassert.Optional)([\n            (0, $16ZAN$muzenlassert.validURL)\n        ]),\n        request_uris: (0, $16ZAN$muzenlassert.Optional)([\n            (0, $16ZAN$muzenlassert.validURL)\n        ])\n    };\n    (0, $16ZAN$muzenlassert.assert)(options, {\n        client: (0, $16ZAN$muzenlassert.instanceOf)($16ZAN$muzenlmetro.client().constructor),\n        registration_endpoint: (0, $16ZAN$muzenlassert.validURL),\n        client_info: openid_client_metadata\n    });\n    let response = await options.client.post(options.registration_endpoint, {\n        body: options.client_info\n    });\n    let info = response.body;\n    if (!info.client_id || !info.client_secret) throw $16ZAN$muzenlmetro.metroError(\"metro.oidc: Error: dynamic registration of client failed, no client_id or client_secret returned\", response);\n    options.client_info = Object.assign(options.client_info, info);\n    return options.client_info;\n}\n\n\nwindow.oidc = {\n    discover: (0, $59828fc83ae4bfdc$export$2e2bcd8739ae039),\n    register: (0, $97def07305c356e0$export$2e2bcd8739ae039)\n};\n\n\n//# sourceMappingURL=browser.js.map\n","import oidcDiscover from './oidc.discovery.mjs'\nimport oidcRegister from './oidc.register.mjs'\n\nwindow.oidc = {\n\tdiscover: oidcDiscover,\n\tregister: oidcRegister\n}\n","import * as metro from '@muze-nl/metro'\nimport jsonmw from '@muze-nl/metro/src/mw/json.mjs'\nimport throwermw from '@muze-nl/metro/src/mw/thrower.mjs'\nimport { validJWA, MustInclude, validAuthMethods } from './oidc.util.mjs'\nimport { assert, fails, Required, Recommended, Optional, oneOf, anyOf, validURL, instanceOf, not } from '@muze-nl/assert'\n\n/**\n * Given options.issuer will get the .well-known/openid-configuration information\n * parse it, assert if follows the specification and return it as a javascript object\n * @param options.issuer Required: URL with the root of the oidc issuer\n * @param options.client Optional: metro client to use in the request\n * @returns object with openid-configuration\n * @throws Error when a network error occurs while fetching openid-configuration\n * @throws assertError when either the options or the openid-configuration fail assertions (and assertion testing is enabled)\n */\nexport default async function oidcDiscovery(options={}) {\n\tconst defaultOptions = {\n\t\tclient: metro.client().with(throwermw()).with(jsonmw()),\n\t\trequireDynamicRegistration: false\n\t}\n\toptions = Object.assign({},defaultOptions,options)\n\n\tassert(options, {\n\t\tclient: Required(instanceOf(metro.client().constructor)),\n\t\tissuer: Required(validURL)\n\t})\n\n\t// https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n\tconst openid_provider_metadata = {\n\t\tissuer: Required(options.issuer),\n\t\tauthorization_endpoint: Required(validURL),\n\t\ttoken_endpoint: Required(validURL),\n\t\tuserinfo_endpoint: Recommended(validURL),\n\t\tjwks_uri: Required(validURL),\n\t\tregistration_endpoint: options.requireDynamicRegistration \n\t\t\t? Required(validURL) \n\t\t\t: Recommended(validURL),\n\t\tscopes_supported: Recommended(MustInclude('openid')),\n\t\tresponse_types_supported: options.requireDynamicRegistration\n\t\t\t? Required(MustInclude('code','id_token','id_token token')) \n\t\t\t: Required([]),\n\t\tresponse_modes_supported: Optional([]),\n\t\tgrant_types_supported: options.requireDynamicRegistration\n\t\t\t? Optional(MustInclude('authorization_code')) // implicit is required according to the spec, but not used in web apps\n\t\t\t: Optional([]),\n\t\tacr_values_supported: Optional([]),\n\t\tsubject_types_supported: Required([]),\n\t\tid_token_signing_alg_values_supported: Required(MustInclude('RS256')),\n\t\tid_token_encryption_alg_values_supported: Optional([]),\n\t\tid_token_encryption_enc_values_supported: Optional([]),\n\t\tuserinfo_signing_alg_values_supported: Optional([]),\n\t\tuserinfo_encryption_alg_values_supported: Optional([]),\n\t\tuserinfo_encryption_enc_values_supported: Optional([]),\n\t\trequest_object_signing_alg_values_supported: Optional(MustInclude('RS256')), // not testing for 'none'\n\t\trequest_object_encryption_alg_values_supported: Optional([]),\n\t\trequest_object_encryption_enc_values_supported: Optional([]),\n\t\ttoken_endpoint_auth_methods_supported: Optional(anyOf(...validAuthMethods)),\n\t\ttoken_endpoint_auth_signing_alg_values_supported: Optional(MustInclude('RS256'), not(MustInclude('none'))),\n\t\tdisplay_values_supported: Optional(anyOf('page','popup','touch','wap')),\n\t\tclaim_types_supported: Optional(anyOf('normal','aggregated','distributed')),\n\t\tclaims_supported: Recommended([]),\n\t\tservice_documentation: Optional(validURL),\n\t\tclaims_locales_supported: Optional([]),\n\t\tui_locales_supported: Optional([]),\n\t\tclaims_parameter_supported: Optional(Boolean),\n\t\trequest_parameter_supported: Optional(Boolean),\n\t\trequest_uri_parameter_supported: Optional(Boolean),\n\t\top_policy_uri: Optional(validURL),\n\t\top_tos_uri: Optional(validURL)\t\n\t}\n\n\t// fetch openid configuration from wellknown and return the json\n\tconst response = await options.client.get(\n\t\t// https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationRequest\n\t\t// note: this allows path components in the options.issuer url\n\t\tmetro.url(options.issuer, '.well-known/openid-configuration')\n\t)\n\tassert(response.body, openid_provider_metadata)\n\t// https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationValidation\n\tassert(response.body.issuer, options.issuer)\n\treturn response.body\n}","import { error } from '@muze-nl/assert'\n\nexport const MustHave = (...options) => \n\t(value, root) => {\n\t\tif (options.filter(o => root.hasOwnKey(o)).length > 0) {\n\t\t\treturn false\n\t\t}\n\t\treturn error('root data must have all of', root, options)\n\t}\n\nexport const MustInclude = (...options) =>\n\t(value) => {\n\t\tif (Array.isArray(value) && options.filter(o => !value.includes(o)).length == 0) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn error('data must be an array which includes',data,options)\n\t\t}\n\t}\n\n//TODO: add link to spec\nexport const validJWK = [\n\t'HS256','HS384','HS512','RS256','RS384','RS512','ES256','ES384','ES512'\n]\n\n//TODO: add link to spec\n// FIXME: enter correct values\nexport const validJWA = [\n\t'HS256','HS384','HS512','RS256','RS384','RS512','ES256','ES384','ES512'\n]\n\n//TODO: add link to spec\nexport const validAuthMethods = [\n\t'client_secret_post', 'client_secret_basic','client_secret_jwt','private_key_jwt'\n]\n","import * as metro from '@muze-nl/metro'\nimport jsonmw from '@muze-nl/metro/src/mw/json.mjs'\nimport throwermw from '@muze-nl/metro/src/mw/thrower.mjs'\nimport { validJWA, validAuthMethods, MustHave } from './oidc.util.mjs'\nimport { assert, Required, Optional, oneOf, anyOf, validURL, validEmail, not, instanceOf } from '@muze-nl/assert'\n\nexport default async function register(options)\n{\n\tconst defaultOptions = {\n\t\tclient: metro.client().with(throwermw()).with(jsonmw())\n\t}\n\n\toptions = Object.assign({}, defaultOptions, options)\n\n    // https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata\n\tconst openid_client_metadata = {\n\t\tredirect_uris: Required([validURL]),\n\t\tresponse_types: Optional([]),\n\t\tgrant_types: Optional(anyOf('authorization_code','refresh_token')), //TODO: match response_types with grant_types\n\t\tapplication_type: Optional(oneOf('native','web')),\n\t\tcontacts: Optional([validEmail]),\n\t\tclient_name: Optional(String),\n\t\tlogo_uri: Optional(validURL),\n\t\tclient_uri: Optional(validURL),\n\t\tpolicy_uri: Optional(validURL),\n\t\ttos_uri: Optional(validURL),\n\t\tjwks_uri: Optional(validURL, not(MustHave('jwks'))),\n\t\tjwks: Optional(validURL, not(MustHave('jwks_uri'))),\n\t\tsector_identifier_uri: Optional(validURL),\n\t\tsubject_type: Optional(String),\n\t\tid_token_signed_response_alg: Optional(oneOf(...validJWA)),\n\t\tid_token_encrypted_response_alg: Optional(oneOf(...validJWA)),\n\t\tid_token_encrypted_response_enc: Optional(oneOf(...validJWA), MustHave('id_token_encrypted_response_alg')),\n\t\tuserinfo_signed_response_alg: Optional(oneOf(...validJWA)),\n\t\tuserinfo_encrypted_response_alg: Optional(oneOf(...validJWA)),\n\t\tuserinfo_encrypted_response_enc: Optional(oneOf(...validJWA), MustHave('userinfo_encrypted_response_alg')),\n\t\trequest_object_signing_alg: Optional(oneOf(...validJWA)),\n\t\trequest_object_encryption_alg: Optional(oneOf(...validJWA)),\n\t\trequest_object_encryption_enc: Optional(oneOf(...validJWA)),\n\t\ttoken_endpoint_auth_method: Optional(oneOf(...validAuthMethods)),\n\t\ttoken_endpoint_auth_signing_alg: Optional(oneOf(...validJWA)),\n\t\tdefault_max_age: Optional(Number),\n\t\trequire_auth_time: Optional(Boolean),\n\t\tdefault_acr_values: Optional([String]),\n\t\tinitiate_login_uri: Optional([validURL]),\n\t\trequest_uris: Optional([validURL])\n\t}\n\n\tassert(options, {\n\t\tclient: instanceOf(metro.client().constructor),\n\t\tregistration_endpoint: validURL, \n\t\tclient_info: openid_client_metadata\n\t})\n\n\tlet response = await options.client\n\t\t.post(options.registration_endpoint, {\n\t\t\tbody: options.client_info\n\t\t})\n\tlet info = response.body\n\tif (!info.client_id || !info.client_secret) {\n\t\tthrow metro.metroError('metro.oidc: Error: dynamic registration of client failed, no client_id or client_secret returned', response)\n\t}\n\toptions.client_info = Object.assign(options.client_info, info)\n\treturn options.client_info\n}"],"names":["$16ZAN$muzenlmetro","require","$16ZAN$muzenlmetrosrcmwjsonmjs","$16ZAN$muzenlmetrosrcmwthrowermjs","$16ZAN$muzenlassert","$parcel$interopDefault","a","__esModule","default","$e4c168dc2d77f7c6$export$f9f8beaf0a247bc1","options","value","root","filter","o","hasOwnKey","length","error","$e4c168dc2d77f7c6$export$2f724b94a5191b13","Array","isArray","includes","data","$e4c168dc2d77f7c6$export$1c533a3c9f23d838","$e4c168dc2d77f7c6$export$8a97a031337e50a9","$59828fc83ae4bfdc$export$2e2bcd8739ae039","Object","assign","client","with","requireDynamicRegistration","assert","Required","instanceOf","constructor","issuer","validURL","openid_provider_metadata","authorization_endpoint","token_endpoint","userinfo_endpoint","Recommended","jwks_uri","registration_endpoint","scopes_supported","response_types_supported","response_modes_supported","Optional","grant_types_supported","acr_values_supported","subject_types_supported","id_token_signing_alg_values_supported","id_token_encryption_alg_values_supported","id_token_encryption_enc_values_supported","userinfo_signing_alg_values_supported","userinfo_encryption_alg_values_supported","userinfo_encryption_enc_values_supported","request_object_signing_alg_values_supported","request_object_encryption_alg_values_supported","request_object_encryption_enc_values_supported","token_endpoint_auth_methods_supported","anyOf","token_endpoint_auth_signing_alg_values_supported","not","display_values_supported","claim_types_supported","claims_supported","service_documentation","claims_locales_supported","ui_locales_supported","claims_parameter_supported","Boolean","request_parameter_supported","request_uri_parameter_supported","op_policy_uri","op_tos_uri","response","get","url","body","$97def07305c356e0$export$2e2bcd8739ae039","openid_client_metadata","redirect_uris","response_types","grant_types","application_type","oneOf","contacts","validEmail","client_name","String","logo_uri","client_uri","policy_uri","tos_uri","jwks","sector_identifier_uri","subject_type","id_token_signed_response_alg","id_token_encrypted_response_alg","id_token_encrypted_response_enc","userinfo_signed_response_alg","userinfo_encrypted_response_alg","userinfo_encrypted_response_enc","request_object_signing_alg","request_object_encryption_alg","request_object_encryption_enc","token_endpoint_auth_method","token_endpoint_auth_signing_alg","default_max_age","Number","require_auth_time","default_acr_values","initiate_login_uri","request_uris","client_info","post","info","client_id","client_secret","metroError","window","oidc","discover","register"],"version":3,"file":"browser.js.map","sourceRoot":"../"}